<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="bot">
    <!-- Refer to Nav2's URDF tutorial -->
    <!-- https://navigation.ros.org/setup_guides/urdf/setup_urdf.html -->

    <!-- define colors -->
    <material name="black">
        <color rgba="0 0 0 1" />
    </material>
    <material name="white">
        <color rgba="1 1 1 1" />
    </material>
    <material name="purple">
        <color rgba="0.3098 0.1765 0.4980 1" />
    </material>

    <!-- Define robot constants -->
    <!-- pi -->
    <xacro:property name="PI" value="3.141592653589793" />
    <!-- base properties -->
    <xacro:property name="base_width" value="0.4" />
    <xacro:property name="base_depth" value="0.2" />
    <xacro:property name="base_height" value="0.1" />
    <xacro:property name="base_mass" value="2.0" />
    <!-- wheel properties -->
    <xacro:property name="wheel_ygap" value="0.005" />
    <xacro:property name="wheel_xoff" value="0.1" />
    <xacro:property name="wheel_radius" value="0.1" />
    <xacro:property name="wheel_width" value="0.05" />
    <xacro:property name="wheel_mass" value="0.2" />
    <!-- caster properties -->
    <xacro:property name="caster_xoff" value="-0.15" />
    <xacro:property name="caster_radius" value="0.05" />
    <xacro:property name="caster_mass" value="0.3" />

    <!-- Define intertial property macros  -->
    <xacro:macro name="box_inertia" params="m w d h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}" />
            <mass value="${m}" />
            <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + h*h)}" iyz="0.0" izz="${(m/12) * (w*w + d*d)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
            <mass value="${m}" />
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0" ixz="0" iyy="${(m/12) * (3*r*r + h*h)}" iyz="0" izz="${(m/2) * (r*r)}" />
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertia" params="m r">
        <inertial>
            <mass value="${m}" />
            <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}" />
        </inertial>
    </xacro:macro>

    <!-- Define wheel macros -->
    <xacro:macro name="wheel" params="prefix y_reflect">
        <joint name="${prefix}_joint" type="continuous">
            <parent link="base_link" />
            <child link="${prefix}_link" />
            <origin xyz="${wheel_xoff} ${y_reflect*(base_depth/2+wheel_ygap+wheel_width/2)} 0" rpy="${PI/2} 0 0" />
            <axis xyz="0 0 1" />
        </joint>

        <link name="${prefix}_link">
            <visual>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}" />
                </geometry>
                <material name="black" />
            </visual>

            <collision>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}" />
                </geometry>
            </collision>

            <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_width}" />
        </link>

    </xacro:macro>

    <!-- Robot Base -->
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${base_width} ${base_depth} ${base_height}" />
            </geometry>
            <material name="white" />
        </visual>

        <collision>
            <geometry>
                <box size="${base_width} ${base_depth} ${base_height}" />
            </geometry>
        </collision>

        <xacro:box_inertia m="${base_mass}" w="${base_width}" d="${base_depth}" h="${base_height}" />
    </link>
    <gazebo reference="base_link">
        <material>Gazebo/White</material>
    </gazebo>

    <!-- Robot Footprint -->
    <joint name="footprint_joint" type="fixed">
        <parent link="base_link" />
        <child link="base_footprint" />
        <origin xyz="0.0 0.0 ${-(wheel_radius)}" rpy="0 0 0" />
    </joint>

    <link name="base_footprint" />

    <!-- Wheels -->
    <xacro:wheel prefix="left_wheel" y_reflect="1" />
    <gazebo reference="left_wheel_link">
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
        <material>Gazebo/Black</material>
    </gazebo>

    <xacro:wheel prefix="right_wheel" y_reflect="-1" />
    <gazebo reference="right_wheel_link">
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
        <material>Gazebo/Black</material>
    </gazebo>

    <!-- Caster ball -->
    <joint name="caster_joint" type="fixed">
        <parent link="base_link" />
        <child link="caster" />
        <origin xyz="${caster_xoff} 0.0 ${-(base_height/2)}" rpy="0 0 0" />
    </joint>

    <link name="caster">
        <visual>
            <geometry>
                <sphere radius="${caster_radius}" />
            </geometry>
            <material name="purple" />
        </visual>

        <collision>
            <geometry>
                <sphere radius="${caster_radius}" />
            </geometry>
        </collision>

        <xacro:sphere_inertia m="${caster_mass}" r="${caster_radius}" />
    </link>
    <gazebo reference="caster">
        <mu1>0.0</mu1>
        <mu2>0.0</mu2>
        <material>Gazebo/Purple</material>
    </gazebo>

    <!-- differential_drive_controller plugin -->
    <gazebo>
        <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
            <ros>
                <namespace>/bot</namespace>
                <!-- <argument>cmd_vel:=cmd_demo</argument>
                <argument>odom:=odom_demo</argument> -->
            </ros>
            <robot_base_frame>base_link</robot_base_frame>
            <update_rate>100</update_rate>
            <left_joint>left_wheel_joint</left_joint>
            <right_joint>right_wheel_joint</right_joint>
            <wheel_separation>0.26</wheel_separation>
            <wheel_diameter>0.2</wheel_diameter>
            <publish_odom>true</publish_odom>
            <publish_odom_tf>false</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>
            <odometry_frame>odom</odometry_frame>
            <max_wheel_torque>10</max_wheel_torque>
            <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
            <max_acceleration>1.0</max_acceleration>
        </plugin>
    </gazebo>
</robot>